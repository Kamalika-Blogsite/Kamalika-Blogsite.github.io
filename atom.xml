<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Blog site]]></title>
  <link href="http://kamalika-blogsite.github.io/atom.xml" rel="self"/>
  <link href="http://kamalika-blogsite.github.io/"/>
  <updated>2015-01-02T03:07:20+05:30</updated>
  <id>http://kamalika-blogsite.github.io/</id>
  <author>
    <name><![CDATA[Kamalika Majumder]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Testing Infra Code - Test-Kitchen, Docker, Chef]]></title>
    <link href="http://kamalika-blogsite.github.io/blog/2014/12/19/test-infra-code-test-kitchen-docker-chef-zero/"/>
    <updated>2014-12-19T15:18:50+05:30</updated>
    <id>http://kamalika-blogsite.github.io/blog/2014/12/19/test-infra-code-test-kitchen-docker-chef-zero</id>
    <content type="html"><![CDATA[<p>In one of my recent project we had figured out how important it is to test your infrastructure code.So here in this blog I am going to discuss in detail about the good practices and technologies that we used to do TDD for infra code.</p>

<p>In this blog I will be using three techs - &ldquo;Test-kitchen, Docker and Chef&rdquo; to do the demo.
This post will cover my talk in <a href="https://rootconf.in/2014/conference#1045-testing-infrastructure-code-using-test-kitchen-doc">#Rootconf - 2014</a></p>

<p>The workflow and practices can be followed with other equivalent tools as well.</p>

<!-- more -->


<h4><em>So here are the topics that we are going to cover in this blog</em></h4>

<ul>
<li>Why TDD for infra code ?</li>
<li>What is test-kitchen ?</li>
<li>Provision instances on demand => kitchen-docker</li>
<li>Configure the instances => Chef-zero</li>
<li>How to test the infra code => Test-kitchen</li>
<li>A Quick Demo</li>
</ul>


<h4><em>What are we trying to solve</em></h4>

<table>
<thead>
<tr>
<th style="text-align:center;">                             Problems                              </th>
<th style="text-align:center;">                     Solutions                         </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center;"> 1. Manual setups per server.Each Server becomes a &ldquo;work of art&rdquo;.  </td>
<td style="text-align:center;"> Modeling server configs(Configuration Management)     </td>
</tr>
<tr>
<td style="text-align:center;"> 2. No track of what changes were made when.                       </td>
<td style="text-align:center;"> Infra as Code,Code to be version controlled.          </td>
</tr>
<tr>
<td style="text-align:center;"> 3. Code works in local host,not in production.                    </td>
<td style="text-align:center;"> Host production like environment locally.             </td>
</tr>
<tr>
<td style="text-align:center;"> 4. Testing takes forever.                                         </td>
<td style="text-align:center;"> Scalable Environment On Demand                        </td>
</tr>
</tbody>
</table>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Environment on Demand]]></title>
    <link href="http://kamalika-blogsite.github.io/blog/2014/12/18/environment-on-demand/"/>
    <updated>2014-12-18T19:34:23+05:30</updated>
    <id>http://kamalika-blogsite.github.io/blog/2014/12/18/environment-on-demand</id>
    <content type="html"><![CDATA[<p>  We all know how important it is to have automated environment in your project.
  In our regular work we speak about automated build and deployment in enterprises, very less is spoken about or given important to the initial setup which is - <strong><em>Provisioning the virtual environments</em></strong></p>

<p>  Automated provisioning of environment on demand is equally important as is automated build and deployment.</p>

<p>  <!-- more --></p>

<p>  It is the entire workflow :-</p>

<p>  <strong><em>Automated Environment on Demand => Config Management => Automated Build and Deployment (Continuous Integration)</em></strong></p>

<p>  Earlier this year in March, as part of an in house initiative, we started building a POC of Environment on Demand using Openstack .The technical stack we used are :</p>

<p>  <strong><em>Hardware:</em></strong></p>

<p>  5 machines - Each with 8 GB ram and 250 GB disk space</p>

<p>  And the setup goes as below:</p>

<pre><code>1.Windows Server 2008 R2 - Vcenter Server
2.Vmware Exsi 5.5 - VMware Hosts (2)
3.Centos 6.5 - KVM Server
4.Centos 6.5 + Openstack RDO (Redhat Openstack) - Openstack server
</code></pre>

<p>  Using the above infrastructure we had setup an openstack-automated environment with VMware and KVM as the hypervisors. Below diagram is an overview of the setup.</p>

<p>  <img src="http://kamalika-blogsite.github.io/source/images/Slide1.jpg" alt="screenshot1" /></p>

<h4><em>Some Openstack Details:</em></h4>

<hr />

<p>  We used Redhat openstack (RDO) for the openstack setup. The reason behind using RDO is that it serves our purpose of supporting most enterprises and found to be stable and easier to configure.</p>

<p>  <strong>For compute:</strong> we used Openstack Nova to setup instances on multiple hypervisors. Our list of hypervisors included:</p>

<p>  <strong><em>1.KVM</em></strong></p>

<p>  <strong><em>2.Vmware</em></strong></p>

<p>  <strong>For networking:</strong> we used Openstack Neutron as the network engine that manages the network creation in openstack with the help of various supported plugins. In this particular demo we used Neutron-Open-Vswitch-Plugin for creating a flat dhcp network.
  We will be working further on using other plugins that supports physical switch(Cisco/Juniper/Extreme) for managing VLANs and GRE tunnels.</p>

<p>  <strong>For Imaging:</strong> we used Openstack Glance as the image service for building images for kvm (qcow) and VMware (vmdk). Currently it supports Centos and Ubuntu images for both kvm and VMware.</p>

<p>  This video will give a quick walk-through of the above setup in details.</p>

<ul>
<li>
<iframe width="420" height="315" src="//www.youtube.com/embed/TlHS8e44BEo" frameborder="0" allowfullscreen></iframe>>
</li>
</ul>


<p>There is a lot refactoring that has to go in it, but we are just starting :)</p>

<p>Watch out this space for more updates.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[From Sysadmin to Devops]]></title>
    <link href="http://kamalika-blogsite.github.io/blog/2014/12/18/from-sysadmin-to-devops/"/>
    <updated>2014-12-18T19:24:40+05:30</updated>
    <id>http://kamalika-blogsite.github.io/blog/2014/12/18/from-sysadmin-to-devops</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
</feed>
