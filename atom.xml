<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[My Blog site]]></title>
  <link href="http://kamalika-blogsite.github.io/atom.xml" rel="self"/>
  <link href="http://kamalika-blogsite.github.io/"/>
  <updated>2015-01-02T18:13:02+05:30</updated>
  <id>http://kamalika-blogsite.github.io/</id>
  <author>
    <name><![CDATA[Kamalika Majumder]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Testing Infra Code - Test-Kitchen, Docker, Chef]]></title>
    <link href="http://kamalika-blogsite.github.io/blog/2014/12/19/test-infra-code-test-kitchen-docker-chef-zero/"/>
    <updated>2014-12-19T15:18:50+05:30</updated>
    <id>http://kamalika-blogsite.github.io/blog/2014/12/19/test-infra-code-test-kitchen-docker-chef-zero</id>
    <content type="html"><![CDATA[<p>In one of my recent project we had figured out how important it is to test your infrastructure code.So here in this blog I am going to discuss in detail about the good practices and technologies that we used to do TDD for infra code.</p>

<p>In this blog I will be using three techs - &ldquo;Test-kitchen, Docker and Chef&rdquo; to do the demo.
This post will cover my talk in <a href="https://rootconf.in/2014/conference#1045-testing-infrastructure-code-using-test-kitchen-doc">#Rootconf - 2014</a></p>

<p>The workflow and practices can be followed with other equivalent tools as well.</p>

<!-- more -->


<h3><em>So here are the topics that we are going to cover in this blog</em></h3>

<ul>
<li>Why TDD for infra code ?</li>
<li>What is test-kitchen ?</li>
<li>Provision instances on demand => kitchen-docker</li>
<li>Configure the instances => Chef-zero</li>
<li>How to test the infra code => Test-kitchen</li>
<li>A Quick Demo</li>
</ul>


<h3><em>What are we trying to solve here</em></h3>

<p>Lets discuss about the four problems and their solutions above that we see quite often in every project.</p>

<p><strong>1. Manual steps to setup server:</strong> Every server having hardcoded configurations e.g: Data directory , user config , etc.The result, well , setting up takes hours even though you are following the same steps everytime.In short every server becomes a &ldquo;work of art&rdquo;.As a result it takes months to finish your deployment.</p>

<p><strong>Solution:</strong> Model server configurations, parameterize everything, relationships with other servers, packages in code.This is called <strong><em>Configuration Management</em></strong>.In our demo we are doing to use Chef as the Configuration Management tool to explain how it is done.</p>

<p><strong>2. No track of what changes were made when:</strong> Another very common issue that we see often is loosing track of what changed.Ever have been in a situation when you come to work one morning and your app server stops working , and you have no idea what changed or who changed.And then you spend one full day to finally find that the iptables rules have changed .</p>

<p><strong>Solution:</strong> We can solve the above issue if we follow step 1 and verion control that code . We will discuss more about <strong><em>Infra As Code</em></strong> in the blog.</p>

<p><strong>3. Code works in local host , not in Production:</strong> A classic developer quote ;) Ever wonder why is that so.Well the answer is pretty simple , inconsistency between dev, QA and Prod environment.If we want the same code on a developer laptop to go and build an app that will be deployed in production, then why dont we have same environment in dev as in production.</p>

<p><strong>Solution:</strong> Host a production like environment right at your dev laptop and the same in QA.So all devs and QAs have a prod like environment to test the same code that will eventually go in production.This way more bugs are caught before it goes to production.We will see how we can achieve that using <strong><em>Test-kitchen</em></strong> more coming forward.</p>

<p><strong>4. Testing takes forever:</strong> Well last but not the least , testing the infra code takes longer than ever.Reason can be not having environment to test the Infra-code.</p>

<p><strong>Solution:</strong> Scalable <strong><em>Environment On Demand</em></strong>. Have an environment that can be brought up , tested with the infra code and destroyed and recreated on demand in a timeline of 5 minutes - Now how does that sound ;)</p>

<p>Well all of the above and more can be done that will cut down you release cycle from months to weeks to days to minutes.In our project where we had followed all of the above our release cycle was cut down from twice a week to mutiple time in a day and the deployment time was brought down from 2 hours to 10 minutes.So let us discuss how this can be done in a real world.</p>

<h3>Infrastructure As Code</h3>

<ul>
<li>Treat your infrastructure as Code</li>
<li>Server configuration, packages installed, relationships with other servers etc should be modeled with code to be automated,removing manual steps prone to errors.</li>
<li>Use version controlling for that code.</li>
<li>For instance we can (and should!)

<ul>
<li>Tag, branch and release the code that define our servers.</li>
<li>Have a lifecycle that covers different stages through the infrastructure code, ie. dev, QA, production.</li>
<li>Continuously test our infrastructure as we make changes.</li>
</ul>


<p><img class="right" src="http://kamalika-blogsite.github.io/images/Slide06.jpg" width="500" height="500"></p></li>
</ul>


<p>This is how the code structure looks like.As told earlier we are going to use <strong><em>Chef-Zero</em></strong> as the Configuration Management tool for our Infrastructure code.There are ofcourse other alternatives like Puppet , Ansible etc.
To be more specific we are going to use Chef-zero for the demo as we wanted to replicate Chef-server while doing real life testing using Test-kitchen.</p>

<h3>Why Test Driven Development for Infrastructure Code</h3>

<ul>
<li>Code works in localhost as well as in production server.</li>
<li>Quick and immediate feedback while testing Infra code.</li>
<li>Faster you test code,faster you deploy in Production.</li>
<li>Shorter Release Cycle for apps.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Environment on Demand]]></title>
    <link href="http://kamalika-blogsite.github.io/blog/2014/12/18/environment-on-demand/"/>
    <updated>2014-12-18T19:34:23+05:30</updated>
    <id>http://kamalika-blogsite.github.io/blog/2014/12/18/environment-on-demand</id>
    <content type="html"><![CDATA[<p>  We all know how important it is to have automated environment in your project.
  In our regular work we speak about automated build and deployment in enterprises, very less is spoken about or given important to the initial setup which is - <strong><em>Provisioning the virtual environments</em></strong></p>

<p>  Automated provisioning of environment on demand is equally important as is automated build and deployment.</p>

<p>  <!-- more --></p>

<p>  It is the entire workflow :-</p>

<p>  <strong><em>Automated Environment on Demand => Config Management => Automated Build and Deployment (Continuous Integration)</em></strong></p>

<p>  Earlier this year in March, as part of an in house initiative, we started building a POC of Environment on Demand using Openstack .The technical stack we used are :</p>

<p>  <strong><em>Hardware:</em></strong></p>

<p>  5 machines - Each with 8 GB ram and 250 GB disk space</p>

<p>  And the setup goes as below:</p>

<pre><code>1.Windows Server 2008 R2 - Vcenter Server
2.Vmware Exsi 5.5 - VMware Hosts (2)
3.Centos 6.5 - KVM Server
4.Centos 6.5 + Openstack RDO (Redhat Openstack) - Openstack server
</code></pre>

<p>  Using the above infrastructure we had setup an openstack-automated environment with VMware and KVM as the hypervisors. Below diagram is an overview of the setup.</p>

<p>  <img src="http://kamalika-blogsite.github.io/source/images/Slide1.jpg" alt="screenshot1" /></p>

<h4><em>Some Openstack Details:</em></h4>

<hr />

<p>  We used Redhat openstack (RDO) for the openstack setup. The reason behind using RDO is that it serves our purpose of supporting most enterprises and found to be stable and easier to configure.</p>

<p>  <strong>For compute:</strong> we used Openstack Nova to setup instances on multiple hypervisors. Our list of hypervisors included:</p>

<p>  <strong><em>1.KVM</em></strong></p>

<p>  <strong><em>2.Vmware</em></strong></p>

<p>  <strong>For networking:</strong> we used Openstack Neutron as the network engine that manages the network creation in openstack with the help of various supported plugins. In this particular demo we used Neutron-Open-Vswitch-Plugin for creating a flat dhcp network.
  We will be working further on using other plugins that supports physical switch(Cisco/Juniper/Extreme) for managing VLANs and GRE tunnels.</p>

<p>  <strong>For Imaging:</strong> we used Openstack Glance as the image service for building images for kvm (qcow) and VMware (vmdk). Currently it supports Centos and Ubuntu images for both kvm and VMware.</p>

<p>  This video will give a quick walk-through of the above setup in details.</p>

<ul>
<li>
<iframe width="420" height="315" src="//www.youtube.com/embed/TlHS8e44BEo" frameborder="0" allowfullscreen></iframe>>
</li>
</ul>


<p>There is a lot refactoring that has to go in it, but we are just starting :)</p>

<p>Watch out this space for more updates.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[From Sysadmin to Devops]]></title>
    <link href="http://kamalika-blogsite.github.io/blog/2014/12/18/from-sysadmin-to-devops/"/>
    <updated>2014-12-18T19:24:40+05:30</updated>
    <id>http://kamalika-blogsite.github.io/blog/2014/12/18/from-sysadmin-to-devops</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
</feed>
